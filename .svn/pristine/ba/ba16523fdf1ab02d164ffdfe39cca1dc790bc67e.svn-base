package com.jtmproject.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;

import com.jtmproject.actions.AnalizeInstallWithSetting;
import com.jtmproject.install.HKEYForInstall;
import com.jtmproject.install.PathInstallProgram;
import com.jtmproject.task.Program;
import com.jtmproject.user.MessagesUser;

public class MenuSettingsIntallGUI extends JPanel implements IViewGeneral, ActionListener{

	private JLabel jlbPathInstall;
	private JButton jbtChangePath;
	private JCheckBox jcbAddDesktopShorcut;
	private JCheckBox jcbAddMenuPrograms;
	private JCheckBox jcbInstallCurrentUser;
	private JCheckBox jcbInstallAllUsers;

	private JList jltCheckBoxesExtensions;

	private String newPathToInstall = "";
	private int HKEYSelected = 0;
	private ArrayList<String> extensionsSelected;
	private CheckableItemJListChecbox[] items;
	
	private int numberOfExtensions = 0;
	private Program program;

	/**
	 * constructor
	 * @param program
	 */
	public MenuSettingsIntallGUI(Program program){
		this.program = program;
	}

	@Override
	public void chargeView() {
		this.setSize(SizesGUI.WINDOW_WIDTH_INSTALL_SCREEN, SizesGUI.WINDOW_HEIGHT_INSTALL_SCREEN - 90);
		this.setLocation(0, 0);
		this.setLayout(null);
		this.setBackground(Color.WHITE);
		
		extensionsSelected = new ArrayList<String>();
		extensionsSelected.clear();
		
		addComponents();
	}

	/**
	 * this adds the components
	 */
	private void addComponents(){
		addJLabel();
		addJButton();
		addJCheckBox();
		addJList();
	}

	/**
	 * this adds the JLabels
	 */
	private void addJLabel(){
		JLabel jlbConfiguration = new JLabel(MessagesUser.getMU().getConfiguration());
		jlbConfiguration = setConfigurationLabel(jlbConfiguration, 10, 10);
		this.add(jlbConfiguration);

		JLabel jlbPath = new JLabel(MessagesUser.getMU().getInstallTo());
		jlbPath = setConfigurationLabel(jlbPath, 30, 40);
		this.add(jlbPath);

		newPathToInstall = PathInstallProgram.getRootPathInstallProgram(program);
		jlbPathInstall = new JLabel(newPathToInstall);
		jlbPathInstall = setConfigurationLabel(jlbPathInstall, 30, 65);
		this.add(jlbPathInstall);

		numberOfExtensions = getArrayListExtension().size();

		if(numberOfExtensions > 0){
			JLabel jlbAssociateExtension = new JLabel(MessagesUser.getMU().getAssociateExtension());
			jlbAssociateExtension = setConfigurationLabel(jlbAssociateExtension, 22, 230);
			this.add(jlbAssociateExtension);
		}
	}

	/**
	 * This function sets configuration to JLabel
	 * @param jlabel
	 * @param locationX
	 * @param locationY
	 * @return
	 */
	private JLabel setConfigurationLabel(JLabel jlabel, int locationX, int locationY){
		jlabel.setSize(SizesGUI.WINDOW_WIDTH_INSTALL_SCREEN - 50, 20);
		jlabel.setLocation(locationX, locationY);
		return jlabel;
	}

	/**
	 * this adds a JButton
	 */
	private void addJButton(){
		if(AnalizeInstallWithSetting.isPossibleChooseFolderToInstall(program)){
			jbtChangePath = new JButton(MessagesUser.getMU().getChange());
			jbtChangePath.setMargin(new Insets(0,0,0,0));
			jbtChangePath.setSize(70, 20);
			jbtChangePath.setLocation(110, 40);
			jbtChangePath.addActionListener(this);
			this.add(jbtChangePath);
		}
	}

	/**
	 * this adds the check boxes
	 */
	private void addJCheckBox(){
		if(AnalizeInstallWithSetting.isPossibleAddShortcutDesktop(program)){
			jcbAddDesktopShorcut = new JCheckBox(MessagesUser.getMU().getAddShortcutDesktop());
			jcbAddDesktopShorcut = jcbConfiguration(jcbAddDesktopShorcut, 20, 105);
			this.add(jcbAddDesktopShorcut);
		}

		if(AnalizeInstallWithSetting.isPossibleAddStartMenu(program)){
			jcbAddMenuPrograms = new JCheckBox(MessagesUser.getMU().getAddShortcutStartMenu());
			jcbAddMenuPrograms = jcbConfiguration(jcbAddMenuPrograms, 20, 125);
			this.add(jcbAddMenuPrograms); 
		}

		jcbInstallCurrentUser = new JCheckBox(MessagesUser.getMU().getInstallCurrentUser());
		jcbInstallCurrentUser = jcbConfiguration(jcbInstallCurrentUser, 20, 170);
		jcbInstallCurrentUser.setSelected(false);
		this.add(jcbInstallCurrentUser);

		jcbInstallAllUsers = new JCheckBox(MessagesUser.getMU().getInstallAllUsers());
		jcbInstallAllUsers = jcbConfiguration(jcbInstallAllUsers, 20, 190);
		jcbInstallAllUsers.setSelected(true);
		
		this.add(jcbInstallAllUsers);
	}	

	/**
	 * this function configures a JCheckBox
	 * @param jcb
	 * @param locationX
	 * @param locationY
	 * @return
	 */
	private JCheckBox jcbConfiguration(JCheckBox jcb, int locationX, int locationY){
		jcb.setSize(SizesGUI.WINDOW_WIDTH_INSTALL_SCREEN - 50, 20);
		jcb.setBackground(Color.WHITE);
		jcb.setLocation(locationX, locationY);
		jcb.setSelected(true);
		jcb.addActionListener(this);
		return jcb;
	}

	/**
	 * this add a JList with the extensions supported if there is any extension
	 */
	private void addJList(){
		if(numberOfExtensions > 0){
			String[] extensions = new String[numberOfExtensions];
			extensions = getArrayListExtension().toArray(extensions);

			jltCheckBoxesExtensions = new JList(createData(extensions)); 
			jltCheckBoxesExtensions.setCellRenderer(new CheckListRenderer());
			jltCheckBoxesExtensions.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

			jltCheckBoxesExtensions.addMouseListener(new MouseAdapter() {
				public void mouseClicked(MouseEvent e) {
					int index = jltCheckBoxesExtensions.locationToIndex(e.getPoint());
					CheckableItemJListChecbox item = (CheckableItemJListChecbox) jltCheckBoxesExtensions.getModel().getElementAt(index);
					item.setSelected(!item.isSelected());
					Rectangle rect = jltCheckBoxesExtensions.getCellBounds(index, index);
					jltCheckBoxesExtensions.repaint(rect);
				}
			});

			JScrollPane scrollPane = new JScrollPane(jltCheckBoxesExtensions);
			scrollPane.setSize(150, 120);
			scrollPane.setLocation(20, 250);
			this.add(scrollPane, BorderLayout.CENTER);
		}
	}

	/**
	 * this create the array of JCheckBox for adding into the JList
	 * @param strs
	 * @return
	 */
	private CheckableItemJListChecbox[] createData(String[] strs) {
		int n = strs.length;
		items = new CheckableItemJListChecbox[n];
		for (int i = 0; i < n; i++) {
			items[i] = new CheckableItemJListChecbox(strs[i]);
		}
		return items;
	}

	/**
	 * returns the list of extension for charge into the JList
	 * @return
	 */
	private ArrayList<String> getArrayListExtension(){
		ArrayList<String> listExtension = new ArrayList<String>();
		listExtension.clear();

		int size = program.getListTagExtensionsSupported().size();
		for(int i = 0; i < size; i++){
			listExtension.add(program.getListTagExtensionsSupported().get(i).getExtension());
		}
		return listExtension;
	}
	
	/**
	 * this saves the extensions selected
	 */
	private void saveExtensionIntoTheList(){
		for(int i = 0; i < items.length; i++){
			if(items[i].isSelected()){
				extensionsSelected.add(items[i].toString());
			}
		}
	}

	@Override
	public void removeElements() {
		this.removeAll();
	}

	@Override
	public void saveData() {
		if(jcbInstallAllUsers.isSelected()){
			HKEYSelected = HKEYForInstall.HKEY_LOCAL_MACHINE;
		}else if(jcbInstallCurrentUser.isSelected()){
			HKEYSelected = HKEYForInstall.HKEY_CURRENT_USER;
		}
		
		if(program.getListTagExtensionsSupported().size() > 0){
			saveExtensionIntoTheList();
		}
		
	}

	@Override
	public int errorCode() {
		return 0;
	}

	/**
	 * returns the new path to install the program
	 * @return
	 */
	public String getNewPathToInstall(){
		return newPathToInstall.substring(3, newPathToInstall.length());
	}

	/**
	 * returns if is added to shortcut desktop
	 * @return
	 */
	public boolean isAddShortcutDesktop(){
		if(AnalizeInstallWithSetting.isPossibleAddShortcutDesktop(program)){
			return jcbAddDesktopShorcut.isSelected();
		}
		return false;
	}

	/**
	 * returns if is added to start menu
	 * @return
	 */
	public boolean isAddStartMenu(){
		if(AnalizeInstallWithSetting.isPossibleAddStartMenu(program)){
			return jcbAddMenuPrograms.isSelected();
		}
		return false;
	}

	/**
	 * this is called when jbtChangePath is pressed
	 */
	private void clickChangePathButton(){
		JFileChooser fileChooserSelectDirectory = new JFileChooser();
		fileChooserSelectDirectory.setDialogTitle(MessagesUser.getMU().getSelectDirectory());
		fileChooserSelectDirectory.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		fileChooserSelectDirectory.setAcceptAllFileFilterUsed(false);
		if (fileChooserSelectDirectory.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
			newPathToInstall = fileChooserSelectDirectory.getSelectedFile().toString();
			jlbPathInstall.setText(newPathToInstall);
		}
	}

	/**
	 * click in jcbInstallAllUsers
	 */
	private void clickInstallAllUser(){
		jcbInstallAllUsers.setSelected(true);
		jcbInstallCurrentUser.setSelected(false);
	}

	/**
	 * click in jcbInstallCurrentUser
	 */
	private void clickInstallCurrent(){
		jcbInstallAllUsers.setSelected(false);
		jcbInstallCurrentUser.setSelected(true);
	}

	/**
	 * returns the HKEYSelected
	 * @return
	 */
	public int getHKEYSelected() {
		return HKEYSelected;
	}

	/**
	 * this returns the extensions selected
	 * @return
	 */
	public ArrayList<String> getExtensionsSelected(){
		if(extensionsSelected.size() == 0){
			return null;
		}
		return extensionsSelected;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == jbtChangePath){
			clickChangePathButton();
		}else if(e.getSource() == jcbInstallAllUsers){
			clickInstallAllUser();
		}else if(e.getSource() == jcbInstallCurrentUser){
			clickInstallCurrent();
		}
	}
}
